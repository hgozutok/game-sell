version: "3.8"

services:
  postgres:
    image: postgres:16-alpine
    container_name: medusa-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: medusa-store
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: medusa-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medusa-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/medusa-store
      REDIS_URL: redis://redis:6379
      JWT_SECRET: supersecretjwttoken
      COOKIE_SECRET: supersecretcookie
      NODE_ENV: development
    ports:
      - "9000:9000"
      - "7001:7001"
    volumes:
      - ./src:/app/src
      - ./medusa-config.ts:/app/medusa-config.ts
    command: npm run dev

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medusa-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/medusa-store
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      WORKER_MODE: worker
    volumes:
      - ./src:/app/src
    command: npm run start:worker

volumes:
  postgres_data:
  redis_data:
